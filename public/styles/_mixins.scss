// Including some handy mixins
// I wind up using on lots of projects

// Shorthand flex-layout.
// sets, display, justify-content, align-items, wrap
// if default values are set,
//  explicit declarations are skipped
@mixin flex-container($direction, $justification, $alignment, $wrap: nowrap) {
  display: flex;
  @if $alignment != 'stretch' {
    align-items: $alignment;
  }
  @if $direction != 'row' {
    flex-direction: $direction;
  }
  @if $justification != 'flex-start' {
    justify-content: $justification;
  }
  @if $wrap != 'nowrap' {
    flex-wrap: $wrap;
  }
}

// useful breakpoint system
// for inlining responsiveness
// in Scss markup.
// breakpoint name and pixel values
// can be changed as needed.
$breakpoints: (
  big: '(min-width: 1020px)',
  medium: '(max-width: 1019px)',
  small: '(max-width: 768px)',
  not-small: '(min-width: 769px)',
  mobile: '(max-width: 520px)'
);

@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media #{map-get($breakpoints, $breakpoint)} {
      @content;
    }
  } @else {
    @warn 'Unfortunately, no value could be retrieved from `#{$breakpoint}`. '
    + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

// useful for selecting
// hidpi background images
// where appropriate
// this assumes a set foldering structure
// so you namy need to change the paths on
// lines 56 and 65 you're organizing files another way
@mixin hidpi-background-image($filename, $background-size: 'mixed', $extension: png) {
  background-image: url('../images/#{$filename}.#{$extension}');
  @if ($background-size != 'mixed') {
    background-size: $background-size;
  }
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6 / 2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    background-image: url('../images/#{$filename}@2x.#{$extension}');
  }
}

